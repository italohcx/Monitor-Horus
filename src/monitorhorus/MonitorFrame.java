/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package monitorhorus;

import java.awt.Color;
import java.awt.HeadlessException;
import java.io.IOException;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.TimeZone;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import model.CRC;
import model.SocketClient;



/**
 *
 * @author italo oliveira
 */
public class MonitorFrame extends javax.swing.JFrame {

    /**
     * Creates new form MonitorFrame
     */
    SocketClient socketClient = new SocketClient();
    int portaServidorCemig = 22051;
    int timeout = 0;
    boolean exibirStreamModbus = false;
    boolean conexaoTCP = false;

    public MonitorFrame() {
        initComponents();
        conexaojRadio.setSelected(true);
        streamjRadio.setSelected(true);
        textFieldEndereco.setEnabled(false);
        textFieldPorta.setEnabled(false);
        textFieldTimeout.setText("15");
        //textFieldImei.setText("358244086104785");
        exibirStreamModbus = true;
        textArea.setForeground(Color.GREEN);
        textArea.setBackground(Color.black);
         this.setIconImage((new javax.swing.ImageIcon(getClass().getResource("/images/Lupa_1.png")).getImage()));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel6 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        textFieldFirsRegister = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        textFieldQtdRegisters = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        btnEviaModbus = new javax.swing.JButton();
        comboBoxFuncaoMod = new javax.swing.JComboBox<>();
        jRadioExibirStream = new javax.swing.JRadioButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        textArea = new javax.swing.JTextArea();
        jPanel5 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        textFieldImei = new javax.swing.JTextField();
        textFieldEndereco = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        textFieldPorta = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        btnConectar = new javax.swing.JButton();
        comboBoxIP = new javax.swing.JComboBox<>();
        conexaojRadio = new javax.swing.JRadioButton();
        textFieldTimeout = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        streamjRadio = new javax.swing.JRadioButton();
        jButton1 = new javax.swing.JButton();
        jPanel7 = new javax.swing.JPanel();
        btnFabricante = new javax.swing.JButton();
        btnReiniciar = new javax.swing.JButton();
        btnAtualizaFw = new javax.swing.JButton();
        btnCamHorus = new javax.swing.JButton();
        btnCamTeste2 = new javax.swing.JButton();
        btnCamTeste3 = new javax.swing.JButton();
        comboFixarTecnologia = new javax.swing.JComboBox<>();
        btnFixarTecnologia = new javax.swing.JToggleButton();
        btnModoOperacao = new javax.swing.JButton();
        comboFixarModoOperacao = new javax.swing.JComboBox<>();
        jPanel8 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        btnTecnologiaFix = new javax.swing.JButton();
        btnTecnologiaAtual = new javax.swing.JButton();
        btnSQM = new javax.swing.JButton();
        btnVerFirm = new javax.swing.JButton();
        btnVerHard = new javax.swing.JButton();
        btnNumSerie = new javax.swing.JButton();
        btnTemperatura = new javax.swing.JButton();
        btnIPModem = new javax.swing.JButton();
        jPanel9 = new javax.swing.JPanel();
        textFieldStream = new javax.swing.JTextField();
        btnEnviarStream = new javax.swing.JButton();
        textFieldStream1 = new javax.swing.JTextField();
        textFieldStream2 = new javax.swing.JTextField();
        textFieldStream3 = new javax.swing.JTextField();
        btnEnviarStream1 = new javax.swing.JButton();
        btnEnviarStream2 = new javax.swing.JButton();
        btnEnviarStream3 = new javax.swing.JToggleButton();

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Monitor Horus");
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Modbus "));

        textFieldFirsRegister.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                textFieldFirsRegisterKeyTyped(evt);
            }
        });

        jLabel5.setText("Código Função:");

        jLabel7.setText("Primeiro registro:");

        textFieldQtdRegisters.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                textFieldQtdRegistersKeyTyped(evt);
            }
        });

        jLabel6.setText("Núm de registros:");

        btnEviaModbus.setText("Enviar");
        btnEviaModbus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEviaModbusActionPerformed(evt);
            }
        });

        comboBoxFuncaoMod.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "03", "04" }));

        jRadioExibirStream.setText("Exibir Stream Montada ");
        jRadioExibirStream.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioExibirStreamActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(comboBoxFuncaoMod, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(textFieldFirsRegister, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(textFieldQtdRegisters, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnEviaModbus, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jRadioExibirStream))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addGap(33, 33, 33)
                        .addComponent(jLabel6)))
                .addContainerGap(56, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jLabel7)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textFieldFirsRegister, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboBoxFuncaoMod, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(textFieldQtdRegisters, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnEviaModbus, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jRadioExibirStream))
                .addGap(40, 40, 40))
        );

        textArea.setColumns(20);
        textArea.setRows(5);
        jScrollPane1.setViewportView(textArea);

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Dados Conexão"));

        jLabel3.setText("Imei:");

        textFieldImei.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                textFieldImeiKeyTyped(evt);
            }
        });

        jLabel1.setText("Endereço:");

        textFieldPorta.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                textFieldPortaKeyTyped(evt);
            }
        });

        jLabel2.setText("Porta:");

        btnConectar.setText("Conectar");
        btnConectar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConectarActionPerformed(evt);
            }
        });

        comboBoxIP.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "192.168.193.1", "192.168.193.2", "192.168.193.4", "192.168.193.5", "192.168.193.13", "192.168.193.14" }));

        conexaojRadio.setText("Conexão pré definida");
        conexaojRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                conexaojRadioActionPerformed(evt);
            }
        });

        textFieldTimeout.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        textFieldTimeout.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                textFieldTimeoutKeyTyped(evt);
            }
        });

        jLabel4.setText("Timout (segundos):");

        streamjRadio.setText("Exibir stream comandos");
        streamjRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                streamjRadioActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(textFieldImei, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(textFieldEndereco, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addComponent(textFieldPorta, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnConectar))))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(comboBoxIP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(textFieldTimeout, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(streamjRadio)
                            .addComponent(conexaojRadio))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(textFieldPorta)
                    .addComponent(textFieldEndereco)
                    .addComponent(textFieldImei)
                    .addComponent(btnConectar))
                .addGap(18, 18, 18)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comboBoxIP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(conexaojRadio))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(streamjRadio))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(textFieldTimeout, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(19, 19, 19))
        );

        jButton1.setText("Limpar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder("Escrita Personalizada"));

        btnFabricante.setText("Abrir Fabricante");
        btnFabricante.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFabricanteActionPerformed(evt);
            }
        });

        btnReiniciar.setText("Reiniciar Modem");
        btnReiniciar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReiniciarActionPerformed(evt);
            }
        });

        btnAtualizaFw.setText("Atualiza Firmware");
        btnAtualizaFw.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAtualizaFwActionPerformed(evt);
            }
        });

        btnCamHorus.setText("Caminho (horus)");
        btnCamHorus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCamHorusActionPerformed(evt);
            }
        });

        btnCamTeste2.setText("Caminho (Teste2)");
        btnCamTeste2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCamTeste2ActionPerformed(evt);
            }
        });

        btnCamTeste3.setText("Caminho (Teste3)");
        btnCamTeste3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCamTeste3ActionPerformed(evt);
            }
        });

        comboFixarTecnologia.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "2G", "3G", "4G", "2G/3G", "2G/4G", "3G/4G", "2G/3G/4G" }));

        btnFixarTecnologia.setText("Fixar Tecnologia");
        btnFixarTecnologia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFixarTecnologiaActionPerformed(evt);
            }
        });

        btnModoOperacao.setText("Modo Operação");
        btnModoOperacao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModoOperacaoActionPerformed(evt);
            }
        });

        comboFixarModoOperacao.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Mono Sim", "Dual Sim" }));

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnAtualizaFw, javax.swing.GroupLayout.DEFAULT_SIZE, 140, Short.MAX_VALUE)
                    .addComponent(btnFabricante, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnCamTeste2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnFixarTecnologia, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnModoOperacao, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnCamTeste3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnReiniciar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnCamHorus, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(comboFixarTecnologia, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(comboFixarModoOperacao, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnFabricante)
                    .addComponent(btnReiniciar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnCamHorus)
                    .addComponent(btnAtualizaFw, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCamTeste3)
                    .addComponent(btnCamTeste2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnFixarTecnologia)
                    .addComponent(comboFixarTecnologia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnModoOperacao)
                    .addComponent(comboFixarModoOperacao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(22, Short.MAX_VALUE))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Leitura Personalizada"));

        btnTecnologiaFix.setText("Tecnologia Fixada");
        btnTecnologiaFix.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTecnologiaFixActionPerformed(evt);
            }
        });

        btnTecnologiaAtual.setText("Tecnologia Atual");
        btnTecnologiaAtual.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTecnologiaAtualActionPerformed(evt);
            }
        });

        btnSQM.setText("SQM");
        btnSQM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSQMActionPerformed(evt);
            }
        });

        btnVerFirm.setText("Versão Firmware");
        btnVerFirm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVerFirmActionPerformed(evt);
            }
        });

        btnVerHard.setText("Versão Hardware");
        btnVerHard.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVerHardActionPerformed(evt);
            }
        });

        btnNumSerie.setText("Número de Serie");
        btnNumSerie.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNumSerieActionPerformed(evt);
            }
        });

        btnTemperatura.setText("Temperatura");
        btnTemperatura.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTemperaturaActionPerformed(evt);
            }
        });

        btnIPModem.setText("IP modem");
        btnIPModem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIPModemActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnTecnologiaAtual, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnTecnologiaFix, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnTemperatura, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnSQM, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnIPModem, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnVerHard, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnNumSerie, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnVerFirm, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(16, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnTecnologiaAtual)
                    .addComponent(btnNumSerie))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnTecnologiaFix)
                    .addComponent(btnVerHard))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSQM)
                    .addComponent(btnVerFirm))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnTemperatura)
                    .addComponent(btnIPModem))
                .addContainerGap(57, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 23, Short.MAX_VALUE))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(14, Short.MAX_VALUE))
        );

        jPanel9.setBorder(javax.swing.BorderFactory.createTitledBorder("Enviar Stream"));

        btnEnviarStream.setText("Enviar");
        btnEnviarStream.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEnviarStreamActionPerformed(evt);
            }
        });

        btnEnviarStream1.setText("Enviar");
        btnEnviarStream1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEnviarStream1ActionPerformed(evt);
            }
        });

        btnEnviarStream2.setText("Enviar");
        btnEnviarStream2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEnviarStream2ActionPerformed(evt);
            }
        });

        btnEnviarStream3.setText("Enviar");
        btnEnviarStream3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEnviarStream3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addComponent(textFieldStream, javax.swing.GroupLayout.PREFERRED_SIZE, 277, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnEnviarStream))
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addComponent(textFieldStream1, javax.swing.GroupLayout.PREFERRED_SIZE, 277, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnEnviarStream1))
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addComponent(textFieldStream2, javax.swing.GroupLayout.PREFERRED_SIZE, 277, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnEnviarStream2))
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addComponent(textFieldStream3, javax.swing.GroupLayout.PREFERRED_SIZE, 277, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnEnviarStream3)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textFieldStream, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnEnviarStream))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textFieldStream1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnEnviarStream1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textFieldStream2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnEnviarStream2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textFieldStream3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnEnviarStream3))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(270, 270, 270))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1048, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 326, Short.MAX_VALUE)
                .addGap(12, 12, 12)
                .addComponent(jButton1))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 1052, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 13, Short.MAX_VALUE)))
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void escreveTextArea(String text) {

        textArea.append(getDateTime() + text + "\n");
        textArea.repaint();
    }

  
    
    private void btnConectarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConectarActionPerformed

        if (!textFieldImei.getText().equals("")) {

            if (btnConectar.getActionCommand().equals("Conectar")) {

                escreveTextArea("Iniciando conexão TCP aguarde...!");

                if (conexaojRadio.isSelected()) {

                    String ip = comboBoxIP.getSelectedItem().toString();

                    if (socketClient.abrirConexao(ip, portaServidorCemig)) {

                        String imei = textFieldImei.getText();

                        escreveTextArea("Conexão TCP iniciada!");
                        try {

                            if (socketClient.abrirConexaoComModem(imei)) {

                                System.out.println("Conexão com modem dispnível");
                                escreveTextArea("Horus conectado ao servidor!");
                                btnConectar.setText("Desconectar");
                                btnConectar.setBackground(Color.green);
                                conexaoTCP = true;
                                streamjRadio.setEnabled(false);
                                conexaojRadio.setEnabled(false);
                                comboBoxIP.setEnabled(false);
                                
                            } else {

                                //JOptionPane.showMessageDialog(null, "Horus desconectado do servidor!");
                                escreveTextArea("Horus desconectado do servidor!");
                            }

                        } catch (InterruptedException ex) {
                            Logger.getLogger(MonitorFrame.class.getName()).log(Level.SEVERE, null, ex);

                        }
                    } else {

                        //JOptionPane.showMessageDialog(null, "Não foi possvivel abrir conexao TCP");
                        escreveTextArea("Não foi possvivel abrir conexao TCP!");
               
                        
                    }

                } else { //Conxao sem campos IP e Porta

                    if (!textFieldEndereco.getText().equals("") && !textFieldPorta.getText().equals("")) {

                        String ip = textFieldEndereco.getText();
                        String porta = textFieldPorta.getText();
                        int portaTcp = Integer.valueOf(porta);

                        if (socketClient.abrirConexao(ip, portaTcp)) {

                            String imei = textFieldImei.getText();

                            try {

                                if (socketClient.abrirConexaoComModem(imei)) {

                                    System.out.println("Conexão com modem dispnível");
                                    escreveTextArea("Horus conectado ao servidor!");
                                    btnConectar.setText("Desconectar");
                                    btnConectar.setBackground(Color.green);
                                    conexaoTCP = true;
                                } else {

                                    // JOptionPane.showMessageDialog(null, "Horus desconectado do servidor!");
                                    escreveTextArea("Horus desconectado do servidor!");
                                }

                            } catch (InterruptedException ex) {
                                Logger.getLogger(MonitorFrame.class.getName()).log(Level.SEVERE, null, ex);

                            }
                        } else {

                            //JOptionPane.showMessageDialog(null, "Não foi possvivel abrir conexao TCP");
                            escreveTextArea("Não foi possvivel abrir conexao TCP!");
                        }

                    } else {

                        JOptionPane.showMessageDialog(null, "Insira um endereço IP e uma Porta TCP para estabelecer a conexão");
                    }
                }

            } else {//status botao

                socketClient.fecharConexao();

                btnConectar.setText("Conectar");
                btnConectar.setBackground(Color.WHITE);
                conexaoTCP = false;
                streamjRadio.setEnabled(true);
                conexaojRadio.setEnabled(true);
               comboBoxIP.setEnabled(true);
            }

        } else {

            JOptionPane.showMessageDialog(null, "Insira um número de IMEI para estabelecer a conexão");

        }

    }//GEN-LAST:event_btnConectarActionPerformed

    private void conexaojRadioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_conexaojRadioActionPerformed

        if (conexaojRadio.isSelected()) {

            textFieldEndereco.setEnabled(false);
            textFieldPorta.setEnabled(false);

        } else {

            textFieldEndereco.setEnabled(true);
            textFieldPorta.setEnabled(true);

        }
    }//GEN-LAST:event_conexaojRadioActionPerformed

    private void btnTecnologiaFixActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTecnologiaFixActionPerformed

        if (conexaoTCP) {

            System.out.println("timer: " + timeout);

            try {
                byte[] resp = socketClient.enviarComando("010301700001842D", carregaTimeout());

                if (resp.length > 0) {

                    String resposta2 = String.valueOf(resp[4]);

                    String respHexa = bytesToHex(resp);

                    if(exibirStreamModbus){escreveTextArea(respHexa.toUpperCase());}

                    System.out.println("Resposta2: " + resposta2);

                    switch (resposta2) {

                        case "0":
                            System.out.println("Horus fixado em triple mode 2G/3G/4G");
                            escreveTextArea("Horus fixado em triple mode 2G/3G/4G");

                            break;

                        case "1":
                            System.out.println("Horus fixado em dual mode 3G/4G");
                            escreveTextArea("Horus fixado em dual mode 3G/4G");

                            break;

                        case "2":
                            System.out.println("Horus fixado em dual mode 2G/3G");
                            escreveTextArea("Horus fixado em dual mode 2G/3G");
                            break;

                        case "3":
                            System.out.println("Horus fixado em dual mode 2G/4G");
                            escreveTextArea("Horus fixado em dual mode 2G/4G");
                            break;

                        case "4":
                            System.out.println("Horus fixado na rede 4G");
                            escreveTextArea("Horus fixado na rede 4G");

                            break;

                        case "5":
                            System.out.println("Horus fixado na rede 3G");
                            escreveTextArea("Horus fixado na rede 3G");
                            break;

                        case "6":
                            System.out.println("Horus fixado na rede 2G");
                            escreveTextArea("Horus fixado na rede 2G");

                            break;

                        default:
                            throw new AssertionError();
                    }

                }

            } catch (Exception e) {

                escreveTextArea("Timeout atingido!");
            }
        }
    }//GEN-LAST:event_btnTecnologiaFixActionPerformed

    private void btnSQMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSQMActionPerformed

        int min;
        int med;
        int max;

        if (conexaoTCP) {

            try {
                byte[] resp = socketClient.enviarComando("0104000A00039009", carregaTimeout());

                if (resp.length > 0) {

                    String respHexa = bytesToHex(resp);
                    if(exibirStreamModbus){escreveTextArea(respHexa.toUpperCase());}

                    min = resp[4];
                    max = resp[6];
                    med = resp[8];

                    min = (-113 + (min * 2));
                    max = (-113 + (max * 2));
                    med = (-113 + (med * 2));

                    escreveTextArea("Miníma: " + "[" + min + "]" + " Média: " + "[" + med + "]" + " Máxima: " + "[" + max + "]");
                }
            } catch (Exception e) {

                escreveTextArea("Timeout atingido!");
            }
        }

    }//GEN-LAST:event_btnSQMActionPerformed

    private void btnTecnologiaAtualActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTecnologiaAtualActionPerformed

        if (conexaoTCP) {

           
            try {

                try {
                    byte[] resp = socketClient.enviarComando("0104014A000111E0", carregaTimeout());

                    if (resp.length > 0) {

                        String resposta2 = String.valueOf(resp[4]);

                        String respHexa = bytesToHex(resp);

                       if(exibirStreamModbus){escreveTextArea(respHexa.toUpperCase());}

                        System.out.println("Resposta2: " + resposta2);

                        switch (resposta2) {

                            case "0":
                                System.out.println("Horus operando na rede 2G (GSM)");
                                escreveTextArea("Horus operando na rede 2G (GSM)");

                                break;

                            case "2":
                                System.out.println("Horus operando na rede 3G (UTRAM)");
                                escreveTextArea("Horus operando na rede 3G (UTRAM)");

                                break;

                            case "3":
                                System.out.println("Horus operando na rede 2G (GSM (EDGE))");
                                escreveTextArea("Horus operando na rede 2G (GSM (EDGE))");
                                break;

                            case "4":
                                System.out.println("Horus operando na rede 3G (UTRAM HSDPA)");
                                escreveTextArea("Horus operando na rede 3G (UTRAM HSDPA)");
                                break;

                            case "5":
                                System.out.println("Horus operando na rede 3G (HSUPA)");
                                escreveTextArea("Horus operando na rede 3G (HSUPA)");

                                break;

                            case "6":
                                System.out.println("Horus operando na rede 3G (UTRAM HSDPA/HSUPA)");
                                escreveTextArea("Horus operando na rede 3G (UTRAM HSDPA/HSUPA)");
                                break;

                            case "7":
                                System.out.println("Horus operando na rede 4G (LTE)");
                                escreveTextArea("Horus operando na rede 4G (LTE)");

                                break;

                            default:
                                throw new AssertionError();
                        }

                    } else {

                        escreveTextArea("Timeout atingido!");
                    }

                } catch (InterruptedException ex) {
                    //Logger.getLogger(MonitorFrame.class.getName()).log(Level.SEVERE, null, ex);
                    escreveTextArea("Timeout atingido!");
                } catch (IOException ex) {
                    //Logger.getLogger(MonitorFrame.class.getName()).log(Level.SEVERE, null, ex);
                    escreveTextArea("Timeout atingido!");
                }
            } catch (Exception e) {
                escreveTextArea("Timeout atingido!");
            }
        }
    }//GEN-LAST:event_btnTecnologiaAtualActionPerformed

    private void textFieldTimeoutKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textFieldTimeoutKeyTyped

        char c = evt.getKeyChar();

        if (!Character.isDigit(c)) {

            evt.consume();
        }
    }//GEN-LAST:event_textFieldTimeoutKeyTyped

    private void textFieldPortaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textFieldPortaKeyTyped
        char c = evt.getKeyChar();

        if (!Character.isDigit(c)) {

            evt.consume();
        }
    }//GEN-LAST:event_textFieldPortaKeyTyped

    private void btnNumSerieActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNumSerieActionPerformed

        if (conexaoTCP) {

            try {
                byte[] resp = socketClient.enviarComando("010301F40005C5C7", carregaTimeout());

                if (resp.length > 0) {

                    String respHexa = bytesToHex(resp);
                    if(exibirStreamModbus){escreveTextArea(respHexa.toUpperCase());}

                    // short pt1 = (short) resp[2];        
                    short pt1 = (short) resp[3];
                    short pt2 = (short) resp[4];
                    short pt3 = (short) resp[5];
                    short pt4 = (short) resp[6];
                    short pt5 = (short) resp[7];
                    short pt6 = (short) resp[8];
                    short pt7 = (short) resp[9];
                    short pt8 = (short) resp[10];
                    short pt9 = (short) resp[11];
                    short pt10 = (short) resp[12];

                    String part1 = converter1BytoShortParaAscII(pt1);
                    //System.out.println("part 1: " + part1); 

                    String part2 = converter1BytoShortParaAscII(pt2);
                    //System.out.println("part 2: " + part2); 

                    String part3 = converter1BytoShortParaAscII(pt3);
                    //System.out.println("part 3: " + part3); 

                    String part4 = converter1BytoShortParaAscII(pt4);
                    //System.out.println("part 4: " + part4); 

                    String part5 = converter1BytoShortParaAscII(pt5);
                    //System.out.println("part 5: " + part5); 

                    String part6 = converter1BytoShortParaAscII(pt6);
                    //System.out.println("part 6: " + part6); 

                    String part7 = converter1BytoShortParaAscII(pt7);
                    //System.out.println("part 7: " + part7); 

                    String part8 = converter1BytoShortParaAscII(pt8);
                    //System.out.println("part 8: " + part8); 

                    String part9 = converter1BytoShortParaAscII(pt9);
                    //System.out.println("part 9: " + part9); 

                    String part10 = converter1BytoShortParaAscII(pt10);
                    //System.out.println("part 10: " + part10); 

                    String numeroSerial = part2 + part1 + part4 + part3 + part6 + part5 + part8 + part7 + part10 + part9;

                    System.out.println(part2 + part1 + part4 + part3 + part6 + part5 + part8 + part7 + part10 + part9);

                    escreveTextArea(numeroSerial);

                } else {

                    escreveTextArea("Timeout atingido!");
                }

            } catch (Exception e) {
                escreveTextArea("Timeout atingido!");
            }

        }
    }//GEN-LAST:event_btnNumSerieActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        textArea.setText("");
    }//GEN-LAST:event_jButton1ActionPerformed

    private void btnVerFirmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVerFirmActionPerformed

        if (conexaoTCP) {
            try {
                byte[] resp = socketClient.enviarComando("010400150002600F", carregaTimeout());

                if (resp.length > 0) {

                    String respHexa = bytesToHex(resp);
                     if(exibirStreamModbus){escreveTextArea(respHexa.toUpperCase());}

                    String pt1 = respHexa.substring(6, 8);
                    System.out.println("pat1: " + pt1);
                    int part1 = Integer.parseInt(pt1, 16);
                    System.out.println("part1: " + part1);

                    String pt2 = respHexa.substring(8, 10);
                    System.out.println("pat2: " + pt2);
                    int part2 = Integer.parseInt(pt2, 16);
                    System.out.println("part2: " + part2);

                    String pt3 = respHexa.substring(10, 12);
                    System.out.println("pat3: " + pt3);
                    int part3 = Integer.parseInt(pt3, 16);
                    System.out.println("part3: " + part3);

                    String pt4 = respHexa.substring(12, 14);
                    System.out.println("pat4: " + pt4);
                    int part4 = Integer.parseInt(pt4, 16);
                    System.out.println("part4: " + part4);

                    String verFw = String.valueOf(part1) + "." + part2 + "." + part3 + "." + part4;

                    escreveTextArea(verFw);

                } else {

                    escreveTextArea("Timeout atingido!");
                }
            } catch (Exception e) {
                escreveTextArea("Timeout atingido!");
            }
        }
    }//GEN-LAST:event_btnVerFirmActionPerformed

    private void btnVerHardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVerHardActionPerformed

        if (conexaoTCP) {

            try {
                byte[] resp = socketClient.enviarComando("0104006F000101D7", carregaTimeout());

                if (resp.length > 0) {

                    String respHexa = bytesToHex(resp);

                     if(exibirStreamModbus){escreveTextArea(respHexa.toUpperCase());}

                    String resposta2 = String.valueOf(resp[4]);

                    System.out.println("Resp2:" + resposta2);

                    if (resposta2.equals("2") && !resposta2.equals("")) {

                        escreveTextArea("Dual Sim");
                    } else {

                        escreveTextArea("Mono Sim");
                    }

                } else {

                    escreveTextArea("Timeout atingido!");
                }
            } catch (Exception e) {
                escreveTextArea("Timeout atingido!");
            }
        }

    }//GEN-LAST:event_btnVerHardActionPerformed

    private void btnFabricanteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFabricanteActionPerformed

        if (conexaoTCP) {

            try {
                byte[] resp = socketClient.enviarComando("01060091000119E7", carregaTimeout());

                if (resp.length > 0) {

                    String respHexa = bytesToHex(resp);

                    if(exibirStreamModbus){escreveTextArea(respHexa.toUpperCase());}

                    if (respHexa.equals("01060091000119e7")) {

                        escreveTextArea("Comando de abertura socket fabricante recebido!");
                    }

                } else {

                    escreveTextArea("Timeout atingido!");
                }
            } catch (Exception e) {

                escreveTextArea("Timeout atingido!");
            }
        }


    }//GEN-LAST:event_btnFabricanteActionPerformed

    private void textFieldImeiKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textFieldImeiKeyTyped
        char c = evt.getKeyChar();

        if (!Character.isDigit(c)) {

            evt.consume();
        }
    }//GEN-LAST:event_textFieldImeiKeyTyped

    private void btnReiniciarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReiniciarActionPerformed

        if (conexaoTCP) {

            try {
                byte[] resp = socketClient.enviarComando("010600D60002E9F3", carregaTimeout());

                if (resp.length > 0) {

                    String respHexa = bytesToHex(resp);

                     if(exibirStreamModbus){escreveTextArea(respHexa.toUpperCase());}

                    if (respHexa.equals("010600d60002e9f3")) {

                        escreveTextArea("Comando de reset do Horus enviado com sucesso!");
                    }

                } else {

                    escreveTextArea("Timeout atingido!");
                }
            } catch (Exception e) {

                escreveTextArea("Timeout atingido!");
            }
        }
    }//GEN-LAST:event_btnReiniciarActionPerformed

    private void btnAtualizaFwActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAtualizaFwActionPerformed

        if (conexaoTCP) {

            try {
                byte[] resp = socketClient.enviarComando("010600AC0001882B", carregaTimeout());

                if (resp.length > 0) {

                    String respHexa = bytesToHex(resp);

                    if(exibirStreamModbus){escreveTextArea(respHexa.toUpperCase());}

                    if (respHexa.equals("010600ac0001882b")) {

                        escreveTextArea("Comando de atualização do firmware enviado com sucesso!");
                    }
                } else {

                    escreveTextArea("Timeout atingido!");
                }
            } catch (Exception e) {

                escreveTextArea("Timeout atingido!");
            }
        }
    }//GEN-LAST:event_btnAtualizaFwActionPerformed

    private void btnCamHorusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCamHorusActionPerformed

        if (conexaoTCP) {
            try {

                byte[] resp = socketClient.enviarComando("011000C50003066F687572007360C8", carregaTimeout());

                if (resp.length > 0) {

                    String respHexa = bytesToHex(resp);

                     if(exibirStreamModbus){escreveTextArea(respHexa.toUpperCase());}

                    if (respHexa.equals("011000c500039035")) {

                        escreveTextArea("Caminho alterado para horus");
                    }

                } else {

                    escreveTextArea("Timeout atingido!");
                }
            } catch (Exception e) {

                escreveTextArea("Timeout atingido!");
            }
        }
    }//GEN-LAST:event_btnCamHorusActionPerformed

    private void btnCamTeste2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCamTeste2ActionPerformed

        if (conexaoTCP) {

            try {
                byte[] resp = socketClient.enviarComando("011000C5000306655474733265F4F5", carregaTimeout());

                if (resp.length > 0) {

                    String respHexa = bytesToHex(resp);

                     if(exibirStreamModbus){escreveTextArea(respHexa.toUpperCase());}

                    if (respHexa.equals("011000c500039035")) {

                        escreveTextArea("Caminho alterado para Teste2");
                    }

                } else {

                    escreveTextArea("Timeout atingido!");
                }
            } catch (Exception e) {

                escreveTextArea("Timeout atingido!");
            }
        }
    }//GEN-LAST:event_btnCamTeste2ActionPerformed

    private void btnCamTeste3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCamTeste3ActionPerformed

        if (conexaoTCP) {

            try {

                byte[] resp = socketClient.enviarComando("011000C5000306655474733365F565", carregaTimeout());

                if (resp.length > 0) {

                    String respHexa = bytesToHex(resp);

                    if(exibirStreamModbus){escreveTextArea(respHexa.toUpperCase());}

                    if (respHexa.equals("011000c500039035")) {

                        escreveTextArea("Caminho alterado para Teste3");
                    }

                } else {

                    escreveTextArea("Timeout atingido!");
                }
            } catch (Exception e) {
                escreveTextArea("Timeout atingido!");
            }
        }
    }//GEN-LAST:event_btnCamTeste3ActionPerformed

    private void btnFixarTecnologiaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFixarTecnologiaActionPerformed

        String tecnologiaDefinida = null;

        String tecnologia = this.comboFixarTecnologia.getSelectedItem().toString();

        tecnologiaDefinida = this.tecnologiaSerFixada(tecnologia, tecnologiaDefinida);

        if (conexaoTCP) {

            try {
                byte[] resp = socketClient.enviarComando(tecnologiaDefinida, carregaTimeout());

                if (resp.length > 0) {

                    String respHexa = bytesToHex(resp);

                     if(exibirStreamModbus){escreveTextArea(respHexa.toUpperCase());}

                    escreveTextArea(getTecnologiaFixada(respHexa.toUpperCase()));

                } else {

                    escreveTextArea("Timeout atingido!");
                }
            } catch (Exception e) {
                escreveTextArea("Timeout atingido!");
            }

        }
    }//GEN-LAST:event_btnFixarTecnologiaActionPerformed

    private void btnTemperaturaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTemperaturaActionPerformed

        if (conexaoTCP) {

            try {
                byte[] resp = socketClient.enviarComando("0104010B000201F5", carregaTimeout());

                if (resp.length > 0) {

                    String respHexa = bytesToHex(resp);
                    
                    if(exibirStreamModbus){escreveTextArea(respHexa.toUpperCase());}

                    String pt1 = respHexa.substring(6, 8);
                    System.out.println("pat1: " + pt1);

                    String pt2 = respHexa.substring(8, 10);
                    System.out.println("pat2: " + pt2);

                    String tempS = pt1 + pt2;

                    int temp = Integer.parseInt(tempS, 16);

                    Double tempD = Double.valueOf((temp));
                    escreveTextArea(truncate(tempD / 10));

                }
            } catch (Exception e) {

                escreveTextArea("Timeout atingido!");
            }
        }

    }//GEN-LAST:event_btnTemperaturaActionPerformed

    private void btnModoOperacaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModoOperacaoActionPerformed

        String modoOpSelecioado = this.comboFixarModoOperacao.getSelectedItem().toString();

        String modoOp = this.configuraModoOperacao(modoOpSelecioado);

        System.out.println("Modo: " + modoOp);

        if (conexaoTCP) {

            try {
                byte[] resp = socketClient.enviarComando(modoOp, carregaTimeout());

                if (resp.length > 0) {

                    String respHexa = bytesToHex(resp);

                   if(exibirStreamModbus){escreveTextArea(respHexa.toUpperCase());}

                    if (respHexa.equals("010600530001b81b")) {

                        escreveTextArea("Modo mono sim configurado!");

                    } else {

                        escreveTextArea("Modo dual sim configurado!");
                    }

                } else {

                    escreveTextArea("Timeout atingido!");
                }
            } catch (Exception e) {

                escreveTextArea("Timeout atingido!");
            }
        }

    }//GEN-LAST:event_btnModoOperacaoActionPerformed

    private void btnIPModemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIPModemActionPerformed

        if (conexaoTCP) {
            try {
                byte[] resp = socketClient.enviarComando("010400670002C014", carregaTimeout());

                if (resp.length > 0) {

                    String respHexa = bytesToHex(resp);
                    if(exibirStreamModbus){escreveTextArea(respHexa.toUpperCase());}

                    String pt1 = respHexa.substring(6, 8);
                    System.out.println("pat1: " + pt1);
                    int part1 = Integer.parseInt(pt1, 16);
                    System.out.println("part1: " + part1);

                    String pt2 = respHexa.substring(8, 10);
                    System.out.println("pat2: " + pt2);
                    int part2 = Integer.parseInt(pt2, 16);
                    System.out.println("part2: " + part2);

                    String pt3 = respHexa.substring(10, 12);
                    System.out.println("pat3: " + pt3);
                    int part3 = Integer.parseInt(pt3, 16);
                    System.out.println("part3: " + part3);

                    String pt4 = respHexa.substring(12, 14);
                    System.out.println("pat4: " + pt4);
                    int part4 = Integer.parseInt(pt4, 16);
                    System.out.println("part4: " + part4);

                    String verFw = String.valueOf(part1) + "." + part2 + "." + part3 + "." + part4;

                    escreveTextArea(verFw);

                } else {

                    escreveTextArea("Timeout atingido!");
                }
            } catch (Exception e) {
                escreveTextArea("Timeout atingido!");
            }
        }

    }//GEN-LAST:event_btnIPModemActionPerformed

    private void btnEnviarStreamActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEnviarStreamActionPerformed

        String stream = textFieldStream.getText();

        stream = stream.replaceAll("\\s+", "");

        System.out.println("stream: " + stream);

        if (conexaoTCP) {

            try {

                byte[] resp = socketClient.enviarComando(stream.trim(), carregaTimeout());

                if (resp.length > 0) {

                    String respHexa = bytesToHex(resp);

                    if(exibirStreamModbus){escreveTextArea(respHexa.toUpperCase());}
                }
            } catch (Exception e) {

                escreveTextArea("Timeout atingido!");
            }
        }

    }//GEN-LAST:event_btnEnviarStreamActionPerformed

    private void btnEnviarStream1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEnviarStream1ActionPerformed

        String stream = textFieldStream1.getText();

        stream = stream.replaceAll("\\s+", "");

        System.out.println("stream: " + stream);

        if (conexaoTCP) {

            try {

                byte[] resp = socketClient.enviarComando(stream.trim(), carregaTimeout());

                if (resp.length > 0) {

                    String respHexa = bytesToHex(resp);

                     if(exibirStreamModbus){escreveTextArea(respHexa.toUpperCase());}
                }
            } catch (Exception e) {

                escreveTextArea("Timeout atingido!");
            }
        }

    }//GEN-LAST:event_btnEnviarStream1ActionPerformed

    private void btnEnviarStream2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEnviarStream2ActionPerformed

        String stream = textFieldStream2.getText();

        stream = stream.replaceAll("\\s+", "");

        System.out.println("stream: " + stream);

        if (conexaoTCP) {

            try {

                byte[] resp = socketClient.enviarComando(stream.trim(), carregaTimeout());

                if (resp.length > 0) {

                    String respHexa = bytesToHex(resp);

                    if(exibirStreamModbus){escreveTextArea(respHexa.toUpperCase());}
                }
            } catch (Exception e) {

                escreveTextArea("Timeout atingido!");
            }
        }

    }//GEN-LAST:event_btnEnviarStream2ActionPerformed

    private void btnEnviarStream3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEnviarStream3ActionPerformed

        String stream = textFieldStream3.getText();

        stream = stream.replaceAll("\\s+", "");

        System.out.println("stream: " + stream);

        if (conexaoTCP) {

            try {

                byte[] resp = socketClient.enviarComando(stream.trim(), carregaTimeout());

                if (resp.length > 0) {

                    String respHexa = bytesToHex(resp);

                     if(exibirStreamModbus){escreveTextArea(respHexa.toUpperCase());}
                }
            } catch (Exception e) {

                escreveTextArea("Timeout atingido!");
            }
        }

    }//GEN-LAST:event_btnEnviarStream3ActionPerformed

    private void streamjRadioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_streamjRadioActionPerformed

        if (streamjRadio.isSelected()) {

            exibirStreamModbus = true;

        } else {

            exibirStreamModbus = false;

        }

    }//GEN-LAST:event_streamjRadioActionPerformed

    private void btnEviaModbusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEviaModbusActionPerformed
        
        String streamHex;

        String funcCod = comboBoxFuncaoMod.getSelectedItem().toString();
        String firstReg = textFieldFirsRegister.getText();
        String qtdReg = textFieldQtdRegisters.getText();

        if (!funcCod.equals("") && !firstReg.equals("") && !qtdReg.equals("")) {

            System.out.println("S1: " + funcCod + " S2: " + firstReg + " S3: " + qtdReg);

            int fcCode = Integer.valueOf(funcCod);
            int fsReg = Integer.valueOf(firstReg);
            int qtReg = Integer.valueOf(qtdReg);

            System.out.println("I1: " + fcCode + " I2: " + fsReg + " I3: " + qtReg);

            byte[] array = new byte[8];

            array[0] = 01;//Slave ID
            array[1] = (byte) fcCode; //Function code;
            array[2] = (byte) ((fsReg >> 8) & 0xff); //First register pt1
            array[3] = (byte) (fsReg & 0xff);  //First register pt2  
            array[4] = (byte) ((qtReg >> 8) & 0xff);
            array[5] = (byte) (qtReg & 0xff);

            //System.out.println(bytesToHex(array).toUpperCase());
            streamHex = byteArrayToHexString(respostaCalCRC(array));

            System.out.println(streamHex);

            if (jRadioExibirStream.isSelected()) {

                escreveTextArea("Stream motada: " + streamHex);
            }

            
            
            if (conexaoTCP) {

            try {
                byte[] resp = socketClient.enviarComando(streamHex, carregaTimeout());

                if (resp.length > 0) {

                    for (int i = 0; i <resp.length; i++) {
                        
                        escreveTextArea("[" + i + "]" + resp[i]);
                    }
                    
                    String respHexa = bytesToHex(resp);
                    
                    if(exibirStreamModbus){escreveTextArea("Stream hexa: " + respHexa.toUpperCase());}


                } else {

                    escreveTextArea("Timeout atingido!");
                }

            } catch (Exception e) {
                escreveTextArea("Timeout atingido!");
            }

        }
            
            
            
            
            
            
            
            
        }


        
        
        
    }//GEN-LAST:event_btnEviaModbusActionPerformed

    private void jRadioExibirStreamActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioExibirStreamActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jRadioExibirStreamActionPerformed

    private void textFieldFirsRegisterKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textFieldFirsRegisterKeyTyped
       char c = evt.getKeyChar();

        if (!Character.isDigit(c)) {

            evt.consume();
        }
    }//GEN-LAST:event_textFieldFirsRegisterKeyTyped

    private void textFieldQtdRegistersKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textFieldQtdRegistersKeyTyped
      char c = evt.getKeyChar();

        if (!Character.isDigit(c)) {

            evt.consume();
        }
    }//GEN-LAST:event_textFieldQtdRegistersKeyTyped

    
    public  byte[] respostaCalCRC(byte[] msg) { // calcula o crc da mensagem e insere o CRC no array de
		// resposta
		
		boolean DEBUG = false;
		int tamanho = msg.length;

		byte resultadoCRC[] = new byte[2];
		resultadoCRC = CRC.getInstance().calculaCRC(msg, tamanho - 2);

		msg[msg.length - 2] = resultadoCRC[0];
		msg[msg.length - 1] = resultadoCRC[1];

		if (DEBUG) {

			System.out.println("indice: 0: " + resultadoCRC[0]);
			System.out.println("indice: 1: " + resultadoCRC[1]);
			
			System.out.println(byteArrayToHexString(msg, msg.length));
		}

		return msg;

	}
    
    
    public  String byteArrayToHexString(byte[] bytesIn, int tambBuffer) {
        final char[] HEX_ARRAY = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'};
        char[] hexChars;
        int j;
        int v;

        if (bytesIn != null) {
            hexChars = new char[tambBuffer * 2];

            for (j = 0; j < tambBuffer; j++) {
                v = bytesIn[j] & 0xFF;
                hexChars[j * 2] = HEX_ARRAY[v / 16];
                hexChars[j * 2 + 1] = HEX_ARRAY[v % 16];
            }
            return new String(hexChars);
        } else {
            System.out.println("[Modbus]: byteArrayToHexString() null pointer.");
            return null;
        }
    }

    public  String byteArrayToHexString(byte[] bytesIn) {
        final char[] HEX_ARRAY = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'};
        char[] hexChars;
        int j;
        int v;

        if (bytesIn != null) {
            hexChars = new char[bytesIn.length * 2];

            for (j = 0; j < bytesIn.length; j++) {
                v = bytesIn[j] & 0xFF;
                hexChars[j * 2] = HEX_ARRAY[v / 16];
                hexChars[j * 2 + 1] = HEX_ARRAY[v % 16];
            }
            return new String(hexChars);
        } else {
            System.out.println("[Modbus]: byteArrayToHexString() null pointer.");
            return null;
        }
    }

    private String getDateTime() {
        DateFormat dateFormat = new SimpleDateFormat("(dd/MM/yyyy HH:mm:ss) ");
        dateFormat.setTimeZone(TimeZone.getTimeZone("GMT-3"));
        Date date = new Date();
        return dateFormat.format(date);
    }

    private int carregaTimeout() throws NumberFormatException {

        String timer = textFieldTimeout.getText();

        if (!timer.equals("") && !timer.equals(null)) {

            timeout = Integer.valueOf(timer);

            if (timeout <= 0) {

                timeout = 30;
            }

        } else {

            timeout = 30;
        }

        return timeout;
    }

    public static byte[] hexStringToByteArray(String s) {
        int len = s.length();
        byte[] data = new byte[len / 2];
        for (int i = 0; i < len; i += 2) {
            data[i / 2] = (byte) ((Character.digit(s.charAt(i), 16) << 4)
                    + Character.digit(s.charAt(i + 1), 16));
        }
        return data;
    }

    private static String bytesToHex(byte[] hashInBytes) {

        StringBuilder sb = new StringBuilder();

        for (byte b : hashInBytes) {
            sb.append(String.format("%02x", b));
        }
        return sb.toString();
    }

    public static String converter1BytoShortParaAscII(short num) {

        String hexString = Integer.toHexString(num);

        int valida;

        valida = hexString.length() % 2;

        if (hexString != null && num != 0) {

            if (valida == 1) {

                String ultimoValor = hexString.substring(hexString.length() - 1, hexString.length());
                String semUltimoValor = hexString.substring(0, hexString.length() - 1);

                hexString = semUltimoValor.concat("0").concat(ultimoValor);

            }

            System.out.println(hexString);

            String numSerie = hexToAscii(hexString);

            return numSerie;
        }

        return "";
    }

    private static String hexToAscii(String hexStr) {
        StringBuilder output = new StringBuilder("");

        for (int i = 0; i < hexStr.length(); i += 2) {
            String str = hexStr.substring(i, i + 2);
            output.append((char) Integer.parseInt(str, 16));
        }

        return output.toString();
    }

    private String tecnologiaSerFixada(String tecnologia, String tecnologiaDefinida) {

        if (tecnologia.equals("2G")) {

            tecnologiaDefinida = "01060170000609EF";

        } else if (tecnologia.equals("3G")) {

            tecnologiaDefinida = "01060170000549EE";

        } else if (tecnologia.equals("4G")) {

            tecnologiaDefinida = "010601700004882E";

        } else if (tecnologia.equals("2G/4G")) {

            tecnologiaDefinida = "010601700003C9EC";

        } else if (tecnologia.equals("2G/3G")) {

            tecnologiaDefinida = "010601700002082C";

        } else if (tecnologia.equals("3G/4G")) {

            tecnologiaDefinida = "010601700001482D";

        } else if (tecnologia.equals("2G/3G/4G")) {

            tecnologiaDefinida = "01060170000089ED";
        }
        return tecnologiaDefinida;
    }

    private String configuraModoOperacao(String modoOperacaoSelecionado) {

        if (modoOperacaoSelecionado.equals("Mono Sim")) {

            return "010600530001B81B";

        } else {

            return "010600530002F81A";
        }
    }

    private String getTecnologiaFixada(String resposta2) throws HeadlessException {

        if (resposta2.equals("01060170000609EF")) {

            return "Horus fixado em 2G!";

        } else if (resposta2.equals("01060170000549EE")) {

            return "Horus fixado em 3G!";

        } else if (resposta2.equals("010601700004882E")) {

            return "Horus fixado em 4G!";

        } else if (resposta2.equals("010601700003C9EC")) {

            return "Horus fixado em 2G/4G!";

        } else if (resposta2.equals("010601700002082C")) {

            return "Horus fixado em 2G/3G!";

        } else if (resposta2.equals("010601700001482D")) {

            return "Horus fixado em 3G/4G!";

        } else if (resposta2.equals("01060170000089ED")) {

            return "Horus fixado em 2G/3G/4G!";
        }
        return "Tecnologia invalida!";
    }

    public static String truncate(double value) {
        DecimalFormat df = new DecimalFormat("#.00");
        return df.format(value);
    }

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MonitorFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MonitorFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MonitorFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MonitorFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MonitorFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAtualizaFw;
    private javax.swing.JButton btnCamHorus;
    private javax.swing.JButton btnCamTeste2;
    private javax.swing.JButton btnCamTeste3;
    private javax.swing.JButton btnConectar;
    private javax.swing.JButton btnEnviarStream;
    private javax.swing.JButton btnEnviarStream1;
    private javax.swing.JButton btnEnviarStream2;
    private javax.swing.JToggleButton btnEnviarStream3;
    private javax.swing.JButton btnEviaModbus;
    private javax.swing.JButton btnFabricante;
    private javax.swing.JToggleButton btnFixarTecnologia;
    private javax.swing.JButton btnIPModem;
    private javax.swing.JButton btnModoOperacao;
    private javax.swing.JButton btnNumSerie;
    private javax.swing.JButton btnReiniciar;
    private javax.swing.JButton btnSQM;
    private javax.swing.JButton btnTecnologiaAtual;
    private javax.swing.JButton btnTecnologiaFix;
    private javax.swing.JButton btnTemperatura;
    private javax.swing.JButton btnVerFirm;
    private javax.swing.JButton btnVerHard;
    private javax.swing.JComboBox<String> comboBoxFuncaoMod;
    private javax.swing.JComboBox<String> comboBoxIP;
    private javax.swing.JComboBox<String> comboFixarModoOperacao;
    private javax.swing.JComboBox<String> comboFixarTecnologia;
    private javax.swing.JRadioButton conexaojRadio;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JRadioButton jRadioExibirStream;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JRadioButton streamjRadio;
    private javax.swing.JTextArea textArea;
    private javax.swing.JTextField textFieldEndereco;
    private javax.swing.JTextField textFieldFirsRegister;
    private javax.swing.JTextField textFieldImei;
    private javax.swing.JTextField textFieldPorta;
    private javax.swing.JTextField textFieldQtdRegisters;
    private javax.swing.JTextField textFieldStream;
    private javax.swing.JTextField textFieldStream1;
    private javax.swing.JTextField textFieldStream2;
    private javax.swing.JTextField textFieldStream3;
    public javax.swing.JTextField textFieldTimeout;
    // End of variables declaration//GEN-END:variables
}
